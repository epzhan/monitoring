## Docker compose with monitoring tools

networks:
  monitor-network:
    name: monitor-network
    driver: bridge

volumes:
  prometheus-data:
  loki-data:
    
services:

  ## Observability ##

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:0.121.0
    networks:
      - monitor-network
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "9411" # Zipkin reader
      - "8888" # OpenTelemetry internal metrics
      - "9464" # Prometheus metrics
    restart: unless-stopped

  nginx:
    container_name : nginx
    image: nginx:latest
    networks:
      - monitor-network
    ports:
      - "4319:4319"
    volumes:
      - ./monitoring/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - otel-collector

  ## Metrics ##
  
  prometheus-service:
    container_name: prometheus-service
    image: prom/prometheus:v3.2.1
    networks:
      - monitor-network
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d" # Retain data for 30 days
      - "--web.enable-otlp-receiver"

  ## Logs ##

  loki-service:
    container_name: loki-service
    image: grafana/loki:3.4.2
    networks:
      - monitor-network
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./monitoring/loki-config.yaml:/etc/loki/loki-config.yaml
    command: ["-config.file=/etc/loki/loki-config.yaml"]

  ## Traces ##

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    networks:
      - monitor-network
    ports:
      - "9411:9411"
    
  jaeger:
    container_name: jaeger-service
    image: jaegertracing/all-in-one:1.67.0
    networks:
      - monitor-network
    ports:
      - "16686:16686" # web UI
      - "4317" # OTLP receiver for traces
      - "4318" # OTLP HTTP default port (protobuf)
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
  
  influxdb-service:
    container_name: influxdb-service
    image: influxdb:1.8.10 # Version 2.x introduces some breaking compatibility changes. K6 support for it comes via an extension
    #image: influxdb:2.7.11
    networks:
      - monitor-network
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6

  ## Analytics and Visualization ##

  grafana-service:
    container_name: grafana-service
    image: grafana/grafana:11.5.2
    networks:
      - monitor-network
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana.ini:/etc/grafana/grafana.ini
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./monitoring/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    depends_on:
      - prometheus-service
      #- loki-service
      - influxdb-service
      - otel-collector
    
  # k6-service:
  #   container_name: k6-service
  #   image: grafana/k6:latest
  #   networks:
  #     - monitor-network
  #   ports:
  #     - "6565:6565"
  #   environment:
  #     - K6_OUT=influxdb=http://influxdb-service:8086/k6
  #   volumes:
  #     - ./src:/src
